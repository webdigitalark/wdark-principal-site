<?php

/**
 * @file
 * Provides custom HTML class settings for field formatters.
 */
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */

function ds_field_attrib_aos_field_formatter_settings_summary_alter(&$summary, $context) {
  foreach (_ds_list_effects_aos() as  $nameAttrib => $nameSettings) {
    $setting = $context['formatter']->getThirdPartySetting('ds_field_attrib_aos', $nameSettings);
    if (!empty($setting)) {
      $summary[] = t($nameAttrib.': @attrib', array('@attrib' => Xss::filter($setting, array())));
    }    
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'aos_data' textfield to all formatters.
 */
function ds_field_attrib_aos_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {

  $element['aos_data'] = array(
    '#type' => 'select',
    '#options' => array(
      'fade-up' => 'fade-up',
      'fade-down' => 'fade-down',
      'fade-right' => 'fade-right',
      'fade-left' => 'fade-left',
      'fade-up-right' => 'fade-up-right',
      'fade-up-left' => 'fade-up-left',
      'fade-down-right' => 'fade-down-right',
      'fade-down-left' => 'fade-down-left',
      'zoom-in' => 'zoom-in',
      'zoom-in-up' => 'zoom-in-up',
      'zoom-in-down' => 'zoom-in-down',
      'zoom-in-right' => 'zoom-in-right',
      'zoom-in-left' => 'zoom-in-left',
      'zoom-out' => 'zoom-out',
      'zoom-out-up' => 'zoom-out-up',
      'zoom-out-down' => 'zoom-out-down',
      'zoom-out-right' => 'zoom-out-right',
      'zoom-out-left' => 'zoom-out-left',
      'slide-up' => 'slide-up',
      'slide-down' => 'slide-down',
      'slide-right' => 'slide-right',
      'slide-left' => 'slide-left',
      'flip-left' => 'flip-left',
      'flip-right' => 'flip-right',
      'flip-up' => 'flip-up',
      'flip-down' => 'flip-down'
    ),  
    '#empty_value' => '',  
    '#title' => t('Attribute aos-data'),
    '#default_value' => $plugin->getThirdPartySetting('ds_field_attrib_aos', 'aos_data'),
  );
  $element['data_aos_duration'] = array(
    '#type' => 'number',
    '#title' => t('Attribute data-aos-duration'),
    '#default_value' => $plugin->getThirdPartySetting('ds_field_attrib_aos', 'data_aos_duration'),
  );  
  $element['data_aos_delay'] = array(
    '#type' => 'number',
    '#title' => t('Attribute data-aos-delay'),
    '#default_value' => $plugin->getThirdPartySetting('ds_field_attrib_aos', 'data_aos_delay'),
  );  
  $element['data_aos_easing'] = array(
    '#type' => 'select',
    '#options' => array(
      'linear' => 'linear',
      'ease' => 'ease',
      'ease-in' => 'ease-in',
      'ease-out' => 'ease-out',
      'ease-in-out' => 'ease-in-out',
      'ease-in-back' => 'ease-in-back',
      'ease-out-back' => 'ease-out-back',
      'ease-in-out-back' => 'ease-in-out-back',
      'ease-in-sine' => 'ease-in-sine',
      'ease-out-sine' => 'ease-out-sine',
      'ease-in-out-sine' => 'ease-in-out-sine',
      'ease-in-quad' => 'ease-in-quad',
      'ease-out-quad' => 'ease-out-quad',
      'ease-in-out-quad' => 'ease-in-out-quad',
      'ease-in-cubic' => 'ease-in-cubic',
      'ease-out-cubic' => 'ease-out-cubic',
      'ease-in-out-cubic' => 'ease-in-out-cubic',
      'ease-in-quart' => 'ease-in-quart',
      'ease-out-quart' => 'ease-out-quart',
      'ease-in-out-quart' => 'ease-in-out-quart',
    ),
    '#empty_value' => '',
    '#title' => t('Attribute data-aos-easing'),
    '#default_value' => $plugin->getThirdPartySetting('ds_field_attrib_aos', 'data_aos_easing'),
  );       
  return $element;
}
/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom aos_data to the field's aos_data attribute
 * according to the field formatter settings.
 */
function ds_field_attrib_aos_preprocess_field(&$variables) {

  // Get a few convenient handles.
  $entity      = $variables['element']['#object'];
  $field_name  = $variables['element']['#field_name'];
  $view_mode   = $variables['element']['#view_mode'];

  // Drill down to field formatter settings.
  $render_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
  $field_display = $render_display->getComponent($field_name);

  // Add class for whole field.
  if (isset($field_display['third_party_settings']['ds_field_attrib_aos'])) {
    foreach (_ds_list_effects_aos() as $nameAttrib => $nameSettings) {
        if(!empty($field_display['third_party_settings']['ds_field_attrib_aos'][$nameSettings])){
          $variables['attributes'][$nameAttrib][] = Html::escape($field_display['third_party_settings']['ds_field_attrib_aos'][$nameSettings]);
          $variables['attributes']['class'][] = Html::escape('aos-item');
        }    
    }
  }
}

/**
* Implements hook_page_attachments().
*/
function ds_field_attrib_aos_page_attachments(array &$attachments) {
  // Attach AOS library to all pages.
  $attachments['#attached']['library'][] = 'ds_field_attrib_aos/aos-library';
}

function _ds_list_effects_aos(){
  $type_settings = array(
    'data-aos' =>'aos_data',
    'data-aos-duration' =>'data_aos_duration',
    'data-aos-delay' =>'data_aos_delay',
    'data-aos-easing' =>'data_aos_easing'
 
  );
  return $type_settings;
}


