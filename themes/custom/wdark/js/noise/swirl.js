"use strict"; const particleCount = 700, particlePropCount = 9, particlePropsLength = 700 * particlePropCount, rangeY = 100, baseTTL = 50, rangeTTL = 150, baseSpeed = .1, rangeSpeed = 2, baseRadius = 1, rangeRadius = 4, baseHue = 220, rangeHue = 100, noiseSteps = 8, xOff = .00125, yOff = .00125, zOff = 5e-4, backgroundColor = "hsla(260,40%,5%,1)"; let container, canvas, ctx, center, gradient, tick, simplex, particleProps, positions, velocities, lifeSpans, speeds, sizes, hues; function setup() { createCanvas(), resize(), initParticles(), draw() } function initParticles() { let e; for (tick = 0, simplex = new SimplexNoise, particleProps = new Float32Array(particlePropsLength), e = 0; e < particlePropsLength; e += particlePropCount)initParticle(e) } function initParticle(e) { let t, a, r, n, c, i, s, o, l; t = rand(canvas.a.width), a = center[1] + randRange(rangeY), r = 0, n = 0, c = 0, i = baseTTL + rand(rangeTTL), s = baseSpeed + rand(rangeSpeed), o = baseRadius + rand(rangeRadius), l = baseHue + rand(rangeHue), particleProps.set([t, a, 0, 0, 0, i, s, o, l], e) } function drawParticles() { let e; for (e = 0; e < particlePropsLength; e += particlePropCount)updateParticle(e) } function updateParticle(e) { let t, a, r, n, c, i, s, o, l, p, d, u, b = 1 + e, x = 2 + e, g = 3 + e, h = 4 + e, P = 5 + e, v = 6 + e, f = 7 + e, w = 8 + e; a = particleProps[e], r = particleProps[b], t = simplex.noise3D(a * xOff, r * yOff, tick * zOff) * noiseSteps * TAU, n = lerp(particleProps[x], cos(t), .5), c = lerp(particleProps[g], sin(t), .5), i = particleProps[h], s = particleProps[P], drawParticle(a, r, l = a + n * (o = particleProps[v]), p = r + c * o, i, s, d = particleProps[f], u = particleProps[w]), i++ , particleProps[e] = l, particleProps[b] = p, particleProps[x] = n, particleProps[g] = c, particleProps[h] = i, (checkBounds(a, r) || i > s) && initParticle(e) } function drawParticle(e, t, a, r, n, c, i, s) { ctx.a.save(), ctx.a.lineCap = "round", ctx.a.lineWidth = i, ctx.a.strokeStyle = `hsla(197,69%,62%,${fadeInOut(n, c)})`, ctx.a.beginPath(), ctx.a.moveTo(e, t), ctx.a.lineTo(a, r), ctx.a.stroke(), ctx.a.closePath(), ctx.a.restore() } function checkBounds(e, t) { return e > canvas.a.width || e < 0 || t > canvas.a.height || t < 0 } function createCanvas() { container = document.querySelector(".content--canvas"), (canvas = { a: document.createElement("canvas"), b: document.createElement("canvas") }).b.style = "\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n    z-index: -1;\n\t", container.appendChild(canvas.b), ctx = { a: canvas.a.getContext("2d"), b: canvas.b.getContext("2d") }, center = [] } function resize() { const { innerWidth: e, innerHeight: t } = window; canvas.a.width = e, canvas.a.height = t, ctx.a.drawImage(canvas.b, 0, 0), canvas.b.width = e, canvas.b.height = t, ctx.b.drawImage(canvas.a, 0, 0), center[0] = .5 * canvas.a.width, center[1] = .5 * canvas.a.height } function renderGlow() { ctx.b.save(), ctx.b.filter = "blur(8px) brightness(200%)", ctx.b.globalCompositeOperation = "lighter", ctx.b.drawImage(canvas.a, 0, 0), ctx.b.restore(), ctx.b.save(), ctx.b.filter = "blur(4px) brightness(200%)", ctx.b.globalCompositeOperation = "lighter", ctx.b.drawImage(canvas.a, 0, 0), ctx.b.restore() } function renderToScreen() { ctx.b.save(), ctx.b.globalCompositeOperation = "lighter", ctx.b.drawImage(canvas.a, 0, 0), ctx.b.restore() } function draw() { tick++ , ctx.a.clearRect(0, 0, canvas.a.width, canvas.a.height), ctx.b.fillStyle = backgroundColor, ctx.b.fillRect(0, 0, canvas.a.width, canvas.a.height), drawParticles(), renderGlow(), renderToScreen(), window.requestAnimationFrame(draw) } window.addEventListener("load", setup), window.addEventListener("resize", resize);
